restart;

# Read data in
data := readdata("input.txt",string);

# Gets all the values in a list of lists

valcalc := proc(datas):

Values := [seq([],i in data[1])];

for i in datas do:
for k,j in i do:
Values[k] := [op(Values[k]),j];
od:
od:

return Values;

end proc;

# Modal function

modals := proc(datas,method:="normal"):

if method = "normal" then;

return map(Statistics[Mode],valcalc(datas));

elif method = "oxygen" then;

tmp_list := [seq([], i in datas[1])]:

for k,i in valcalc(datas) do:

if is(numboccur(i,"1") = numboccur(i,"0")) then;

tmp_list[k] := "1";

else;

tmp_list[k] := Statistics[Mode](i);

end if;

od;

return tmp_list;

elif method = "CO2" then;

tmp_list := [seq([], i in datas[1])]:

for k,i in valcalc(datas) do:

if is(numboccur(i,"1") = numboccur(i,"0")) then;

tmp_list[k] := "0";

else;

tmp_list[k] := `if`(Statistics[Mode](i)="1","0","1");

end if;

od;

return tmp_list;

else end if;

end proc;

# Oxygen section test
testing := proc(datas,method:="normal",loopno:=1):

guess := modals(datas,method);

new_dat := [];

for i in datas do;

if i[loopno] = guess[loopno] then;

new_dat := [op(new_dat),i];

else end if;

od;

if nops(new_dat) = 1 then;
return new_dat[1];
else;
testing(new_dat,method,loopno+1);
end if;

end proc;

# These two lines are remarkably inefficient
ox_rat := MapleTA:-Builtin[strcat](op(ListTools[Reverse](convert(ListTools[Reverse]([seq(parse(i),i in testing(data,"oxygen"))]),'base',2,10))));
co_srub := MapleTA:-Builtin[strcat](op(ListTools[Reverse](convert(ListTools[Reverse]([seq(parse(i),i in testing(data,"CO2"))]),'base',2,10))));

parse(ox_rat) * parse(co_srub);